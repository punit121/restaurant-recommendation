{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [],
   "source": [
    "df=pd.read_csv(\"RestoInfo.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>name</th>\n",
       "      <th>online_order</th>\n",
       "      <th>book_table</th>\n",
       "      <th>rate</th>\n",
       "      <th>votes</th>\n",
       "      <th>location</th>\n",
       "      <th>rest_type</th>\n",
       "      <th>dish_liked</th>\n",
       "      <th>cuisines</th>\n",
       "      <th>approx_cost(for two people)</th>\n",
       "      <th>reviews_list</th>\n",
       "      <th>menu_item</th>\n",
       "      <th>listed_in(type)</th>\n",
       "      <th>listed_in(city)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>46019</td>\n",
       "      <td>Unique Brew Cafe Resto</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>Indiranagar</td>\n",
       "      <td>Quick Bites</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Fast Food</td>\n",
       "      <td>200</td>\n",
       "      <td>[]</td>\n",
       "      <td>[]</td>\n",
       "      <td>Dine-out</td>\n",
       "      <td>Old Airport Road</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>28849</td>\n",
       "      <td>Jayanthi Sagar</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3.1 /5</td>\n",
       "      <td>21</td>\n",
       "      <td>Koramangala 5th Block</td>\n",
       "      <td>Quick Bites</td>\n",
       "      <td>NaN</td>\n",
       "      <td>South Indian, North Indian, Chinese</td>\n",
       "      <td>200</td>\n",
       "      <td>[('Rated 2.0', \"RATEDn  Works only because it'...</td>\n",
       "      <td>[]</td>\n",
       "      <td>Dine-out</td>\n",
       "      <td>Koramangala 4th Block</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>19855</td>\n",
       "      <td>Rock Stone Ice Cream Factory</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>4.0/5</td>\n",
       "      <td>131</td>\n",
       "      <td>BTM</td>\n",
       "      <td>Dessert Parlor</td>\n",
       "      <td>Icecream Cake, Brownie, Waffles, Chocolate Ice...</td>\n",
       "      <td>Ice Cream</td>\n",
       "      <td>230</td>\n",
       "      <td>[('Rated 4.0', \"RATEDn  Ice creams are really ...</td>\n",
       "      <td>['Midnight Indulgence Cake', 'Butterscotch Mel...</td>\n",
       "      <td>Delivery</td>\n",
       "      <td>Jayanagar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>35188</td>\n",
       "      <td>Punjabi by Nature 2.0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>4.2 /5</td>\n",
       "      <td>3236</td>\n",
       "      <td>BTM</td>\n",
       "      <td>Casual Dining, Microbrewery</td>\n",
       "      <td>Paneer Tikki, Mutton Raan, Mango Margarita, Cr...</td>\n",
       "      <td>North Indian</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[('Rated 3.0', \"RATEDn  It has a beautiful amb...</td>\n",
       "      <td>[]</td>\n",
       "      <td>Delivery</td>\n",
       "      <td>Koramangala 7th Block</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>7070</td>\n",
       "      <td>Rayalaseema Chefs</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>3.9/5</td>\n",
       "      <td>225</td>\n",
       "      <td>Marathahalli</td>\n",
       "      <td>Casual Dining</td>\n",
       "      <td>Bamboo Chicken, Butter Naan, Mutton Biryani, P...</td>\n",
       "      <td>North Indian, Biryani, Andhra, Chinese</td>\n",
       "      <td>800</td>\n",
       "      <td>[('Rated 5.0', 'RATEDn  Had Good experience wi...</td>\n",
       "      <td>[]</td>\n",
       "      <td>Delivery</td>\n",
       "      <td>Brookefield</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0                          name online_order book_table    rate  \\\n",
       "0       46019        Unique Brew Cafe Resto           No         No     NaN   \n",
       "1       28849                Jayanthi Sagar           No         No  3.1 /5   \n",
       "2       19855  Rock Stone Ice Cream Factory          Yes         No   4.0/5   \n",
       "3       35188         Punjabi by Nature 2.0           No         No  4.2 /5   \n",
       "4        7070             Rayalaseema Chefs          Yes        Yes   3.9/5   \n",
       "\n",
       "   votes               location                    rest_type  \\\n",
       "0      0            Indiranagar                  Quick Bites   \n",
       "1     21  Koramangala 5th Block                  Quick Bites   \n",
       "2    131                    BTM               Dessert Parlor   \n",
       "3   3236                    BTM  Casual Dining, Microbrewery   \n",
       "4    225           Marathahalli                Casual Dining   \n",
       "\n",
       "                                          dish_liked  \\\n",
       "0                                                NaN   \n",
       "1                                                NaN   \n",
       "2  Icecream Cake, Brownie, Waffles, Chocolate Ice...   \n",
       "3  Paneer Tikki, Mutton Raan, Mango Margarita, Cr...   \n",
       "4  Bamboo Chicken, Butter Naan, Mutton Biryani, P...   \n",
       "\n",
       "                                 cuisines approx_cost(for two people)  \\\n",
       "0                               Fast Food                         200   \n",
       "1     South Indian, North Indian, Chinese                         200   \n",
       "2                               Ice Cream                         230   \n",
       "3                            North Indian                         NaN   \n",
       "4  North Indian, Biryani, Andhra, Chinese                         800   \n",
       "\n",
       "                                        reviews_list  \\\n",
       "0                                                 []   \n",
       "1  [('Rated 2.0', \"RATEDn  Works only because it'...   \n",
       "2  [('Rated 4.0', \"RATEDn  Ice creams are really ...   \n",
       "3  [('Rated 3.0', \"RATEDn  It has a beautiful amb...   \n",
       "4  [('Rated 5.0', 'RATEDn  Had Good experience wi...   \n",
       "\n",
       "                                           menu_item listed_in(type)  \\\n",
       "0                                                 []        Dine-out   \n",
       "1                                                 []        Dine-out   \n",
       "2  ['Midnight Indulgence Cake', 'Butterscotch Mel...        Delivery   \n",
       "3                                                 []        Delivery   \n",
       "4                                                 []        Delivery   \n",
       "\n",
       "         listed_in(city)  \n",
       "0       Old Airport Road  \n",
       "1  Koramangala 4th Block  \n",
       "2              Jayanagar  \n",
       "3  Koramangala 7th Block  \n",
       "4            Brookefield  "
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Delivery              1048\n",
       "Dine-out               737\n",
       "Desserts               122\n",
       "Cafes                   60\n",
       "Drinks & nightlife      46\n",
       "Pubs and bars           28\n",
       "Buffet                  28\n",
       "Name: listed_in(type), dtype: int64"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['listed_in(type)'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([], dtype=int64),)"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.where(pd.isnull(df['listed_in(type)']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>votes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>2069.000000</td>\n",
       "      <td>2069.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>25840.654422</td>\n",
       "      <td>276.048333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>14877.311956</td>\n",
       "      <td>673.916908</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>27.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>12561.000000</td>\n",
       "      <td>7.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>26193.000000</td>\n",
       "      <td>43.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>38902.000000</td>\n",
       "      <td>210.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>51643.000000</td>\n",
       "      <td>7854.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Unnamed: 0        votes\n",
       "count   2069.000000  2069.000000\n",
       "mean   25840.654422   276.048333\n",
       "std    14877.311956   673.916908\n",
       "min       27.000000     0.000000\n",
       "25%    12561.000000     7.000000\n",
       "50%    26193.000000    43.000000\n",
       "75%    38902.000000   210.000000\n",
       "max    51643.000000  7854.000000"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'3.1 /5'"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['rate'][1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/punitkumar/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \n",
      "/Users/punitkumar/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  if __name__ == '__main__':\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n"
     ]
    }
   ],
   "source": [
    "for i in range(0,2069): \n",
    "    x=str(df['rate'][i])\n",
    "    \n",
    "    t=x.find(\"/\")\n",
    "    if t==-1:\n",
    "        df['rate'][i]=2.0\n",
    "        print(2)\n",
    "    else:\n",
    "        df['rate'][i] = float(x[:t])\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       2.0\n",
       "1       2.0\n",
       "2       2.0\n",
       "3       2.0\n",
       "4       2.0\n",
       "       ... \n",
       "2064    2.0\n",
       "2065    2.0\n",
       "2066    2.0\n",
       "2067    2.0\n",
       "2068    2.0\n",
       "Name: rate, Length: 2069, dtype: float64"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['rate'].fillna(2.0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([], dtype=int64),)"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.where(pd.isnull(df['rate']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       2.0\n",
       "1       3.1\n",
       "2       4.0\n",
       "3       4.2\n",
       "4       3.9\n",
       "       ... \n",
       "2064    3.8\n",
       "2065    4.0\n",
       "2066    4.3\n",
       "2067    2.0\n",
       "2068    3.2\n",
       "Name: rate, Length: 2069, dtype: float64"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['rate'].astype('float')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      2\n",
       "1    3.1\n",
       "2      4\n",
       "3    4.2\n",
       "4    3.9\n",
       "Name: rate, dtype: object"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['rate'].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [],
   "source": [
    "#df['approx_cost(for two people)'].astype('int')\n",
    "df['approx_cost(for two people)'] = pd.to_numeric(df['approx_cost(for two people)'], errors='coerce')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       200.0\n",
       "1       200.0\n",
       "2       230.0\n",
       "3       220.0\n",
       "4       800.0\n",
       "        ...  \n",
       "2064    700.0\n",
       "2065    220.0\n",
       "2066    220.0\n",
       "2067    300.0\n",
       "2068    150.0\n",
       "Name: approx_cost(for two people), Length: 2069, dtype: float64"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['approx_cost(for two people)'].fillna(220.0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['approx_cost(for two people)'] = df['approx_cost(for two people)'].astype(float)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.scatter(df['rate'],df['approx_cost(for two people)'])\n",
    "plt.xlabel('rate')\n",
    "plt.ylabel('Price')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       0\n",
       "1       0\n",
       "2       1\n",
       "3       0\n",
       "4       1\n",
       "       ..\n",
       "2064    1\n",
       "2065    1\n",
       "2066    0\n",
       "2067    0\n",
       "2068    0\n",
       "Name: online_order, Length: 2069, dtype: int64"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['online_order'].map({'No':0,'Yes':1})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>name</th>\n",
       "      <th>online_order</th>\n",
       "      <th>book_table</th>\n",
       "      <th>rate</th>\n",
       "      <th>votes</th>\n",
       "      <th>location</th>\n",
       "      <th>rest_type</th>\n",
       "      <th>dish_liked</th>\n",
       "      <th>cuisines</th>\n",
       "      <th>approx_cost(for two people)</th>\n",
       "      <th>reviews_list</th>\n",
       "      <th>menu_item</th>\n",
       "      <th>listed_in(type)</th>\n",
       "      <th>listed_in(city)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>46019</td>\n",
       "      <td>Unique Brew Cafe Resto</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>Indiranagar</td>\n",
       "      <td>Quick Bites</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Fast Food</td>\n",
       "      <td>200.0</td>\n",
       "      <td>[]</td>\n",
       "      <td>[]</td>\n",
       "      <td>Dine-out</td>\n",
       "      <td>Old Airport Road</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>28849</td>\n",
       "      <td>Jayanthi Sagar</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3.1</td>\n",
       "      <td>21</td>\n",
       "      <td>Koramangala 5th Block</td>\n",
       "      <td>Quick Bites</td>\n",
       "      <td>NaN</td>\n",
       "      <td>South Indian, North Indian, Chinese</td>\n",
       "      <td>200.0</td>\n",
       "      <td>[('Rated 2.0', \"RATEDn  Works only because it'...</td>\n",
       "      <td>[]</td>\n",
       "      <td>Dine-out</td>\n",
       "      <td>Koramangala 4th Block</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>19855</td>\n",
       "      <td>Rock Stone Ice Cream Factory</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>4</td>\n",
       "      <td>131</td>\n",
       "      <td>BTM</td>\n",
       "      <td>Dessert Parlor</td>\n",
       "      <td>Icecream Cake, Brownie, Waffles, Chocolate Ice...</td>\n",
       "      <td>Ice Cream</td>\n",
       "      <td>230.0</td>\n",
       "      <td>[('Rated 4.0', \"RATEDn  Ice creams are really ...</td>\n",
       "      <td>['Midnight Indulgence Cake', 'Butterscotch Mel...</td>\n",
       "      <td>Delivery</td>\n",
       "      <td>Jayanagar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>35188</td>\n",
       "      <td>Punjabi by Nature 2.0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>4.2</td>\n",
       "      <td>3236</td>\n",
       "      <td>BTM</td>\n",
       "      <td>Casual Dining, Microbrewery</td>\n",
       "      <td>Paneer Tikki, Mutton Raan, Mango Margarita, Cr...</td>\n",
       "      <td>North Indian</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[('Rated 3.0', \"RATEDn  It has a beautiful amb...</td>\n",
       "      <td>[]</td>\n",
       "      <td>Delivery</td>\n",
       "      <td>Koramangala 7th Block</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>7070</td>\n",
       "      <td>Rayalaseema Chefs</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>3.9</td>\n",
       "      <td>225</td>\n",
       "      <td>Marathahalli</td>\n",
       "      <td>Casual Dining</td>\n",
       "      <td>Bamboo Chicken, Butter Naan, Mutton Biryani, P...</td>\n",
       "      <td>North Indian, Biryani, Andhra, Chinese</td>\n",
       "      <td>800.0</td>\n",
       "      <td>[('Rated 5.0', 'RATEDn  Had Good experience wi...</td>\n",
       "      <td>[]</td>\n",
       "      <td>Delivery</td>\n",
       "      <td>Brookefield</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0                          name online_order book_table rate  \\\n",
       "0       46019        Unique Brew Cafe Resto           No         No    2   \n",
       "1       28849                Jayanthi Sagar           No         No  3.1   \n",
       "2       19855  Rock Stone Ice Cream Factory          Yes         No    4   \n",
       "3       35188         Punjabi by Nature 2.0           No         No  4.2   \n",
       "4        7070             Rayalaseema Chefs          Yes        Yes  3.9   \n",
       "\n",
       "   votes               location                    rest_type  \\\n",
       "0      0            Indiranagar                  Quick Bites   \n",
       "1     21  Koramangala 5th Block                  Quick Bites   \n",
       "2    131                    BTM               Dessert Parlor   \n",
       "3   3236                    BTM  Casual Dining, Microbrewery   \n",
       "4    225           Marathahalli                Casual Dining   \n",
       "\n",
       "                                          dish_liked  \\\n",
       "0                                                NaN   \n",
       "1                                                NaN   \n",
       "2  Icecream Cake, Brownie, Waffles, Chocolate Ice...   \n",
       "3  Paneer Tikki, Mutton Raan, Mango Margarita, Cr...   \n",
       "4  Bamboo Chicken, Butter Naan, Mutton Biryani, P...   \n",
       "\n",
       "                                 cuisines  approx_cost(for two people)  \\\n",
       "0                               Fast Food                        200.0   \n",
       "1     South Indian, North Indian, Chinese                        200.0   \n",
       "2                               Ice Cream                        230.0   \n",
       "3                            North Indian                          NaN   \n",
       "4  North Indian, Biryani, Andhra, Chinese                        800.0   \n",
       "\n",
       "                                        reviews_list  \\\n",
       "0                                                 []   \n",
       "1  [('Rated 2.0', \"RATEDn  Works only because it'...   \n",
       "2  [('Rated 4.0', \"RATEDn  Ice creams are really ...   \n",
       "3  [('Rated 3.0', \"RATEDn  It has a beautiful amb...   \n",
       "4  [('Rated 5.0', 'RATEDn  Had Good experience wi...   \n",
       "\n",
       "                                           menu_item listed_in(type)  \\\n",
       "0                                                 []        Dine-out   \n",
       "1                                                 []        Dine-out   \n",
       "2  ['Midnight Indulgence Cake', 'Butterscotch Mel...        Delivery   \n",
       "3                                                 []        Delivery   \n",
       "4                                                 []        Delivery   \n",
       "\n",
       "         listed_in(city)  \n",
       "0       Old Airport Road  \n",
       "1  Koramangala 4th Block  \n",
       "2              Jayanagar  \n",
       "3  Koramangala 7th Block  \n",
       "4            Brookefield  "
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 248,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>name</th>\n",
       "      <th>online_order</th>\n",
       "      <th>book_table</th>\n",
       "      <th>rate</th>\n",
       "      <th>votes</th>\n",
       "      <th>location</th>\n",
       "      <th>rest_type</th>\n",
       "      <th>dish_liked</th>\n",
       "      <th>cuisines</th>\n",
       "      <th>approx_cost(for two people)</th>\n",
       "      <th>reviews_list</th>\n",
       "      <th>menu_item</th>\n",
       "      <th>listed_in(type)</th>\n",
       "      <th>listed_in(city)</th>\n",
       "      <th>final_train_attr</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>46019</td>\n",
       "      <td>Unique Brew Cafe Resto</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>Indiranagar</td>\n",
       "      <td>Quick Bites</td>\n",
       "      <td>nan</td>\n",
       "      <td>Fast Food</td>\n",
       "      <td>200.0</td>\n",
       "      <td>[]</td>\n",
       "      <td>[]</td>\n",
       "      <td>Dine-out</td>\n",
       "      <td>Old Airport Road</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>28849</td>\n",
       "      <td>Jayanthi Sagar</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3.1</td>\n",
       "      <td>21</td>\n",
       "      <td>Koramangala 5th Block</td>\n",
       "      <td>Quick Bites</td>\n",
       "      <td>nan</td>\n",
       "      <td>South Indian, North Indian, Chinese</td>\n",
       "      <td>200.0</td>\n",
       "      <td>[('Rated 2.0', \"RATEDn  Works only because it'...</td>\n",
       "      <td>[]</td>\n",
       "      <td>Dine-out</td>\n",
       "      <td>Koramangala 4th Block</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>19855</td>\n",
       "      <td>Rock Stone Ice Cream Factory</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>4.0</td>\n",
       "      <td>131</td>\n",
       "      <td>BTM</td>\n",
       "      <td>Dessert Parlor</td>\n",
       "      <td>Icecream Cake, Brownie, Waffles, Chocolate Ice...</td>\n",
       "      <td>Ice Cream</td>\n",
       "      <td>230.0</td>\n",
       "      <td>[('Rated 4.0', \"RATEDn  Ice creams are really ...</td>\n",
       "      <td>['Midnight Indulgence Cake', 'Butterscotch Mel...</td>\n",
       "      <td>Delivery</td>\n",
       "      <td>Jayanagar</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>35188</td>\n",
       "      <td>Punjabi by Nature 2.0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>4.2</td>\n",
       "      <td>3236</td>\n",
       "      <td>BTM</td>\n",
       "      <td>Casual Dining, Microbrewery</td>\n",
       "      <td>Paneer Tikki, Mutton Raan, Mango Margarita, Cr...</td>\n",
       "      <td>North Indian</td>\n",
       "      <td>nan</td>\n",
       "      <td>[('Rated 3.0', \"RATEDn  It has a beautiful amb...</td>\n",
       "      <td>[]</td>\n",
       "      <td>Delivery</td>\n",
       "      <td>Koramangala 7th Block</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>7070</td>\n",
       "      <td>Rayalaseema Chefs</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>3.9</td>\n",
       "      <td>225</td>\n",
       "      <td>Marathahalli</td>\n",
       "      <td>Casual Dining</td>\n",
       "      <td>Bamboo Chicken, Butter Naan, Mutton Biryani, P...</td>\n",
       "      <td>North Indian, Biryani, Andhra, Chinese</td>\n",
       "      <td>800.0</td>\n",
       "      <td>[('Rated 5.0', 'RATEDn  Had Good experience wi...</td>\n",
       "      <td>[]</td>\n",
       "      <td>Delivery</td>\n",
       "      <td>Brookefield</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2064</td>\n",
       "      <td>2064</td>\n",
       "      <td>8778</td>\n",
       "      <td>Zeeshan</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>3.8</td>\n",
       "      <td>214</td>\n",
       "      <td>Koramangala 7th Block</td>\n",
       "      <td>Casual Dining</td>\n",
       "      <td>Rolls, Kathi Roll, Mutton Roll, Chicken Roll, ...</td>\n",
       "      <td>North Indian, Kebab, Biryani, Rolls</td>\n",
       "      <td>700.0</td>\n",
       "      <td>[('Rated 1.0', \"RATEDn  Pathetic service .we v...</td>\n",
       "      <td>[]</td>\n",
       "      <td>Delivery</td>\n",
       "      <td>BTM</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2065</td>\n",
       "      <td>2065</td>\n",
       "      <td>18086</td>\n",
       "      <td>Zaica Dine &amp; Wine</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1013</td>\n",
       "      <td>Indiranagar</td>\n",
       "      <td>Casual Dining</td>\n",
       "      <td>Chocolate Pani Puri, Butter Chicken, Gajar Hal...</td>\n",
       "      <td>North Indian</td>\n",
       "      <td>nan</td>\n",
       "      <td>[('Rated 5.0', \"RATEDn  This place is located ...</td>\n",
       "      <td>[]</td>\n",
       "      <td>Delivery</td>\n",
       "      <td>Indiranagar</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2066</td>\n",
       "      <td>2066</td>\n",
       "      <td>46112</td>\n",
       "      <td>Murphy's Brewhouse - The Paul Bangalore</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>4.3</td>\n",
       "      <td>2039</td>\n",
       "      <td>Domlur</td>\n",
       "      <td>Pub, Microbrewery</td>\n",
       "      <td>Chicken Bruschetta, Tandoori Chicken, Veggie P...</td>\n",
       "      <td>Continental, North Indian, Finger Food</td>\n",
       "      <td>nan</td>\n",
       "      <td>[('Rated 4.0', 'RATEDn  Service - 4/5, Taste -...</td>\n",
       "      <td>[]</td>\n",
       "      <td>Pubs and bars</td>\n",
       "      <td>Old Airport Road</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2067</td>\n",
       "      <td>2067</td>\n",
       "      <td>10808</td>\n",
       "      <td>Cee Yem</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>BTM</td>\n",
       "      <td>Quick Bites</td>\n",
       "      <td>nan</td>\n",
       "      <td>South Indian, Kerala, North Indian</td>\n",
       "      <td>300.0</td>\n",
       "      <td>[]</td>\n",
       "      <td>[]</td>\n",
       "      <td>Dine-out</td>\n",
       "      <td>BTM</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2068</td>\n",
       "      <td>2068</td>\n",
       "      <td>28875</td>\n",
       "      <td>Cauvery Fast Food</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3.2</td>\n",
       "      <td>4</td>\n",
       "      <td>Ejipura</td>\n",
       "      <td>Quick Bites</td>\n",
       "      <td>nan</td>\n",
       "      <td>Chinese</td>\n",
       "      <td>150.0</td>\n",
       "      <td>[('Rated 3.0', 'RATEDn  Small place with minim...</td>\n",
       "      <td>[]</td>\n",
       "      <td>Dine-out</td>\n",
       "      <td>Koramangala 4th Block</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2069 rows × 17 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     index Unnamed: 0                                     name online_order  \\\n",
       "0        0      46019                   Unique Brew Cafe Resto           No   \n",
       "1        1      28849                           Jayanthi Sagar           No   \n",
       "2        2      19855             Rock Stone Ice Cream Factory          Yes   \n",
       "3        3      35188                    Punjabi by Nature 2.0           No   \n",
       "4        4       7070                        Rayalaseema Chefs          Yes   \n",
       "...    ...        ...                                      ...          ...   \n",
       "2064  2064       8778                                  Zeeshan          Yes   \n",
       "2065  2065      18086                        Zaica Dine & Wine          Yes   \n",
       "2066  2066      46112  Murphy's Brewhouse - The Paul Bangalore           No   \n",
       "2067  2067      10808                                  Cee Yem           No   \n",
       "2068  2068      28875                        Cauvery Fast Food           No   \n",
       "\n",
       "     book_table rate votes               location  \\\n",
       "0            No  2.0     0            Indiranagar   \n",
       "1            No  3.1    21  Koramangala 5th Block   \n",
       "2            No  4.0   131                    BTM   \n",
       "3            No  4.2  3236                    BTM   \n",
       "4           Yes  3.9   225           Marathahalli   \n",
       "...         ...  ...   ...                    ...   \n",
       "2064         No  3.8   214  Koramangala 7th Block   \n",
       "2065        Yes  4.0  1013            Indiranagar   \n",
       "2066        Yes  4.3  2039                 Domlur   \n",
       "2067         No  2.0     0                    BTM   \n",
       "2068         No  3.2     4                Ejipura   \n",
       "\n",
       "                        rest_type  \\\n",
       "0                     Quick Bites   \n",
       "1                     Quick Bites   \n",
       "2                  Dessert Parlor   \n",
       "3     Casual Dining, Microbrewery   \n",
       "4                   Casual Dining   \n",
       "...                           ...   \n",
       "2064                Casual Dining   \n",
       "2065                Casual Dining   \n",
       "2066            Pub, Microbrewery   \n",
       "2067                  Quick Bites   \n",
       "2068                  Quick Bites   \n",
       "\n",
       "                                             dish_liked  \\\n",
       "0                                                   nan   \n",
       "1                                                   nan   \n",
       "2     Icecream Cake, Brownie, Waffles, Chocolate Ice...   \n",
       "3     Paneer Tikki, Mutton Raan, Mango Margarita, Cr...   \n",
       "4     Bamboo Chicken, Butter Naan, Mutton Biryani, P...   \n",
       "...                                                 ...   \n",
       "2064  Rolls, Kathi Roll, Mutton Roll, Chicken Roll, ...   \n",
       "2065  Chocolate Pani Puri, Butter Chicken, Gajar Hal...   \n",
       "2066  Chicken Bruschetta, Tandoori Chicken, Veggie P...   \n",
       "2067                                                nan   \n",
       "2068                                                nan   \n",
       "\n",
       "                                    cuisines approx_cost(for two people)  \\\n",
       "0                                  Fast Food                       200.0   \n",
       "1        South Indian, North Indian, Chinese                       200.0   \n",
       "2                                  Ice Cream                       230.0   \n",
       "3                               North Indian                         nan   \n",
       "4     North Indian, Biryani, Andhra, Chinese                       800.0   \n",
       "...                                      ...                         ...   \n",
       "2064     North Indian, Kebab, Biryani, Rolls                       700.0   \n",
       "2065                            North Indian                         nan   \n",
       "2066  Continental, North Indian, Finger Food                         nan   \n",
       "2067      South Indian, Kerala, North Indian                       300.0   \n",
       "2068                                 Chinese                       150.0   \n",
       "\n",
       "                                           reviews_list  \\\n",
       "0                                                    []   \n",
       "1     [('Rated 2.0', \"RATEDn  Works only because it'...   \n",
       "2     [('Rated 4.0', \"RATEDn  Ice creams are really ...   \n",
       "3     [('Rated 3.0', \"RATEDn  It has a beautiful amb...   \n",
       "4     [('Rated 5.0', 'RATEDn  Had Good experience wi...   \n",
       "...                                                 ...   \n",
       "2064  [('Rated 1.0', \"RATEDn  Pathetic service .we v...   \n",
       "2065  [('Rated 5.0', \"RATEDn  This place is located ...   \n",
       "2066  [('Rated 4.0', 'RATEDn  Service - 4/5, Taste -...   \n",
       "2067                                                 []   \n",
       "2068  [('Rated 3.0', 'RATEDn  Small place with minim...   \n",
       "\n",
       "                                              menu_item listed_in(type)  \\\n",
       "0                                                    []        Dine-out   \n",
       "1                                                    []        Dine-out   \n",
       "2     ['Midnight Indulgence Cake', 'Butterscotch Mel...        Delivery   \n",
       "3                                                    []        Delivery   \n",
       "4                                                    []        Delivery   \n",
       "...                                                 ...             ...   \n",
       "2064                                                 []        Delivery   \n",
       "2065                                                 []        Delivery   \n",
       "2066                                                 []   Pubs and bars   \n",
       "2067                                                 []        Dine-out   \n",
       "2068                                                 []        Dine-out   \n",
       "\n",
       "            listed_in(city) final_train_attr  \n",
       "0          Old Airport Road                   \n",
       "1     Koramangala 4th Block                   \n",
       "2                 Jayanagar                   \n",
       "3     Koramangala 7th Block                   \n",
       "4               Brookefield                   \n",
       "...                     ...              ...  \n",
       "2064                    BTM                   \n",
       "2065            Indiranagar                   \n",
       "2066       Old Airport Road                   \n",
       "2067                    BTM                   \n",
       "2068  Koramangala 4th Block                   \n",
       "\n",
       "[2069 rows x 17 columns]"
      ]
     },
     "execution_count": 248,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['final_train_attr']=''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.applymap(str)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 250,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['final_train_attr']=df['cuisines']+df['location']+df['approx_cost(for two people)'] +df['dish_liked']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 251,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0                            Fast FoodIndiranagar200.0nan\n",
       "1       South Indian, North Indian, ChineseKoramangala...\n",
       "2       Ice CreamBTM230.0Icecream Cake, Brownie, Waffl...\n",
       "3       North IndianBTMnanPaneer Tikki, Mutton Raan, M...\n",
       "4       North Indian, Biryani, Andhra, ChineseMarathah...\n",
       "                              ...                        \n",
       "2064    North Indian, Kebab, Biryani, RollsKoramangala...\n",
       "2065    North IndianIndiranagarnanChocolate Pani Puri,...\n",
       "2066    Continental, North Indian, Finger FoodDomlurna...\n",
       "2067        South Indian, Kerala, North IndianBTM300.0nan\n",
       "2068                               ChineseEjipura150.0nan\n",
       "Name: final_train_attr, Length: 2069, dtype: object"
      ]
     },
     "execution_count": 251,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['final_train_attr']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import ast \n",
    "from scipy import stats\n",
    "from ast import literal_eval\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\n",
    "from sklearn.metrics.pairwise import linear_kernel, cosine_similarity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 253,
   "metadata": {},
   "outputs": [],
   "source": [
    "tf = TfidfVectorizer(analyzer='word',ngram_range=(1, 2),min_df=0, stop_words='english')\n",
    "tfidf_matrix = tf.fit_transform(df['final_train_attr'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 254,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2069, 10115)"
      ]
     },
     "execution_count": 254,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tfidf_matrix.shape\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 255,
   "metadata": {},
   "outputs": [],
   "source": [
    "cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 256,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.reset_index()\n",
    "titles = df['name']\n",
    "indices = pd.Series(df.index, index=df['name'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 257,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "name\n",
       "Unique Brew Cafe Resto                        0\n",
       "Jayanthi Sagar                                1\n",
       "Rock Stone Ice Cream Factory                  2\n",
       "Punjabi by Nature 2.0                         3\n",
       "Rayalaseema Chefs                             4\n",
       "                                           ... \n",
       "Zeeshan                                    2064\n",
       "Zaica Dine & Wine                          2065\n",
       "Murphy's Brewhouse - The Paul Bangalore    2066\n",
       "Cee Yem                                    2067\n",
       "Cauvery Fast Food                          2068\n",
       "Length: 2069, dtype: int64"
      ]
     },
     "execution_count": 257,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "indices"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting fuzzywuzzy\n",
      "  Downloading https://files.pythonhosted.org/packages/43/ff/74f23998ad2f93b945c0309f825be92e04e0348e062026998b5eefef4c33/fuzzywuzzy-0.18.0-py2.py3-none-any.whl\n",
      "Installing collected packages: fuzzywuzzy\n",
      "Successfully installed fuzzywuzzy-0.18.0\n"
     ]
    }
   ],
   "source": [
    "!pip install fuzzywuzzy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "metadata": {},
   "outputs": [],
   "source": [
    "from fuzzywuzzy import process\n",
    "from fuzzywuzzy import fuzz\n",
    "from itertools import chain"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 258,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('Fast Food, Biryani, ChineseBrigade Roadnannan', 45, 1345)"
      ]
     },
     "execution_count": 258,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res=process.extract(\"good ambiance restaurant\", df['final_train_attr'], scorer=fuzz.token_sort_ratio)\n",
    "\n",
    "res[:1][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 259,
   "metadata": {},
   "outputs": [],
   "source": [
    "final_res=[a for a in res[0]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 261,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1345"
      ]
     },
     "execution_count": 261,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_res[2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_final=df[df['final_train_attr']==final_res[0]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>name</th>\n",
       "      <th>online_order</th>\n",
       "      <th>book_table</th>\n",
       "      <th>rate</th>\n",
       "      <th>votes</th>\n",
       "      <th>location</th>\n",
       "      <th>rest_type</th>\n",
       "      <th>dish_liked</th>\n",
       "      <th>cuisines</th>\n",
       "      <th>approx_cost(for two people)</th>\n",
       "      <th>reviews_list</th>\n",
       "      <th>menu_item</th>\n",
       "      <th>listed_in(type)</th>\n",
       "      <th>listed_in(city)</th>\n",
       "      <th>final_train_attr</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>46019</td>\n",
       "      <td>Unique Brew Cafe Resto</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>Indiranagar</td>\n",
       "      <td>Quick Bites</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Fast Food</td>\n",
       "      <td>200.0</td>\n",
       "      <td>[]</td>\n",
       "      <td>[]</td>\n",
       "      <td>Dine-out</td>\n",
       "      <td>Old Airport Road</td>\n",
       "      <td>0                                    Fast Food...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>28849</td>\n",
       "      <td>Jayanthi Sagar</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3.1</td>\n",
       "      <td>21</td>\n",
       "      <td>Koramangala 5th Block</td>\n",
       "      <td>Quick Bites</td>\n",
       "      <td>NaN</td>\n",
       "      <td>South Indian, North Indian, Chinese</td>\n",
       "      <td>200.0</td>\n",
       "      <td>[('Rated 2.0', \"RATEDn  Works only because it'...</td>\n",
       "      <td>[]</td>\n",
       "      <td>Dine-out</td>\n",
       "      <td>Koramangala 4th Block</td>\n",
       "      <td>0                                    Fast Food...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>19855</td>\n",
       "      <td>Rock Stone Ice Cream Factory</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>4</td>\n",
       "      <td>131</td>\n",
       "      <td>BTM</td>\n",
       "      <td>Dessert Parlor</td>\n",
       "      <td>Icecream Cake, Brownie, Waffles, Chocolate Ice...</td>\n",
       "      <td>Ice Cream</td>\n",
       "      <td>230.0</td>\n",
       "      <td>[('Rated 4.0', \"RATEDn  Ice creams are really ...</td>\n",
       "      <td>['Midnight Indulgence Cake', 'Butterscotch Mel...</td>\n",
       "      <td>Delivery</td>\n",
       "      <td>Jayanagar</td>\n",
       "      <td>0                                    Fast Food...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>35188</td>\n",
       "      <td>Punjabi by Nature 2.0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>4.2</td>\n",
       "      <td>3236</td>\n",
       "      <td>BTM</td>\n",
       "      <td>Casual Dining, Microbrewery</td>\n",
       "      <td>Paneer Tikki, Mutton Raan, Mango Margarita, Cr...</td>\n",
       "      <td>North Indian</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[('Rated 3.0', \"RATEDn  It has a beautiful amb...</td>\n",
       "      <td>[]</td>\n",
       "      <td>Delivery</td>\n",
       "      <td>Koramangala 7th Block</td>\n",
       "      <td>0                                    Fast Food...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>7070</td>\n",
       "      <td>Rayalaseema Chefs</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>3.9</td>\n",
       "      <td>225</td>\n",
       "      <td>Marathahalli</td>\n",
       "      <td>Casual Dining</td>\n",
       "      <td>Bamboo Chicken, Butter Naan, Mutton Biryani, P...</td>\n",
       "      <td>North Indian, Biryani, Andhra, Chinese</td>\n",
       "      <td>800.0</td>\n",
       "      <td>[('Rated 5.0', 'RATEDn  Had Good experience wi...</td>\n",
       "      <td>[]</td>\n",
       "      <td>Delivery</td>\n",
       "      <td>Brookefield</td>\n",
       "      <td>0                                    Fast Food...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2064</td>\n",
       "      <td>2064</td>\n",
       "      <td>8778</td>\n",
       "      <td>Zeeshan</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>3.8</td>\n",
       "      <td>214</td>\n",
       "      <td>Koramangala 7th Block</td>\n",
       "      <td>Casual Dining</td>\n",
       "      <td>Rolls, Kathi Roll, Mutton Roll, Chicken Roll, ...</td>\n",
       "      <td>North Indian, Kebab, Biryani, Rolls</td>\n",
       "      <td>700.0</td>\n",
       "      <td>[('Rated 1.0', \"RATEDn  Pathetic service .we v...</td>\n",
       "      <td>[]</td>\n",
       "      <td>Delivery</td>\n",
       "      <td>BTM</td>\n",
       "      <td>0                                    Fast Food...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2065</td>\n",
       "      <td>2065</td>\n",
       "      <td>18086</td>\n",
       "      <td>Zaica Dine &amp; Wine</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>4</td>\n",
       "      <td>1013</td>\n",
       "      <td>Indiranagar</td>\n",
       "      <td>Casual Dining</td>\n",
       "      <td>Chocolate Pani Puri, Butter Chicken, Gajar Hal...</td>\n",
       "      <td>North Indian</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[('Rated 5.0', \"RATEDn  This place is located ...</td>\n",
       "      <td>[]</td>\n",
       "      <td>Delivery</td>\n",
       "      <td>Indiranagar</td>\n",
       "      <td>0                                    Fast Food...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2066</td>\n",
       "      <td>2066</td>\n",
       "      <td>46112</td>\n",
       "      <td>Murphy's Brewhouse - The Paul Bangalore</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>4.3</td>\n",
       "      <td>2039</td>\n",
       "      <td>Domlur</td>\n",
       "      <td>Pub, Microbrewery</td>\n",
       "      <td>Chicken Bruschetta, Tandoori Chicken, Veggie P...</td>\n",
       "      <td>Continental, North Indian, Finger Food</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[('Rated 4.0', 'RATEDn  Service - 4/5, Taste -...</td>\n",
       "      <td>[]</td>\n",
       "      <td>Pubs and bars</td>\n",
       "      <td>Old Airport Road</td>\n",
       "      <td>0                                    Fast Food...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2067</td>\n",
       "      <td>2067</td>\n",
       "      <td>10808</td>\n",
       "      <td>Cee Yem</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>BTM</td>\n",
       "      <td>Quick Bites</td>\n",
       "      <td>NaN</td>\n",
       "      <td>South Indian, Kerala, North Indian</td>\n",
       "      <td>300.0</td>\n",
       "      <td>[]</td>\n",
       "      <td>[]</td>\n",
       "      <td>Dine-out</td>\n",
       "      <td>BTM</td>\n",
       "      <td>0                                    Fast Food...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2068</td>\n",
       "      <td>2068</td>\n",
       "      <td>28875</td>\n",
       "      <td>Cauvery Fast Food</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3.2</td>\n",
       "      <td>4</td>\n",
       "      <td>Ejipura</td>\n",
       "      <td>Quick Bites</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Chinese</td>\n",
       "      <td>150.0</td>\n",
       "      <td>[('Rated 3.0', 'RATEDn  Small place with minim...</td>\n",
       "      <td>[]</td>\n",
       "      <td>Dine-out</td>\n",
       "      <td>Koramangala 4th Block</td>\n",
       "      <td>0                                    Fast Food...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2069 rows × 17 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      index  Unnamed: 0                                     name online_order  \\\n",
       "0         0       46019                   Unique Brew Cafe Resto           No   \n",
       "1         1       28849                           Jayanthi Sagar           No   \n",
       "2         2       19855             Rock Stone Ice Cream Factory          Yes   \n",
       "3         3       35188                    Punjabi by Nature 2.0           No   \n",
       "4         4        7070                        Rayalaseema Chefs          Yes   \n",
       "...     ...         ...                                      ...          ...   \n",
       "2064   2064        8778                                  Zeeshan          Yes   \n",
       "2065   2065       18086                        Zaica Dine & Wine          Yes   \n",
       "2066   2066       46112  Murphy's Brewhouse - The Paul Bangalore           No   \n",
       "2067   2067       10808                                  Cee Yem           No   \n",
       "2068   2068       28875                        Cauvery Fast Food           No   \n",
       "\n",
       "     book_table rate  votes               location  \\\n",
       "0            No    2      0            Indiranagar   \n",
       "1            No  3.1     21  Koramangala 5th Block   \n",
       "2            No    4    131                    BTM   \n",
       "3            No  4.2   3236                    BTM   \n",
       "4           Yes  3.9    225           Marathahalli   \n",
       "...         ...  ...    ...                    ...   \n",
       "2064         No  3.8    214  Koramangala 7th Block   \n",
       "2065        Yes    4   1013            Indiranagar   \n",
       "2066        Yes  4.3   2039                 Domlur   \n",
       "2067         No    2      0                    BTM   \n",
       "2068         No  3.2      4                Ejipura   \n",
       "\n",
       "                        rest_type  \\\n",
       "0                     Quick Bites   \n",
       "1                     Quick Bites   \n",
       "2                  Dessert Parlor   \n",
       "3     Casual Dining, Microbrewery   \n",
       "4                   Casual Dining   \n",
       "...                           ...   \n",
       "2064                Casual Dining   \n",
       "2065                Casual Dining   \n",
       "2066            Pub, Microbrewery   \n",
       "2067                  Quick Bites   \n",
       "2068                  Quick Bites   \n",
       "\n",
       "                                             dish_liked  \\\n",
       "0                                                   NaN   \n",
       "1                                                   NaN   \n",
       "2     Icecream Cake, Brownie, Waffles, Chocolate Ice...   \n",
       "3     Paneer Tikki, Mutton Raan, Mango Margarita, Cr...   \n",
       "4     Bamboo Chicken, Butter Naan, Mutton Biryani, P...   \n",
       "...                                                 ...   \n",
       "2064  Rolls, Kathi Roll, Mutton Roll, Chicken Roll, ...   \n",
       "2065  Chocolate Pani Puri, Butter Chicken, Gajar Hal...   \n",
       "2066  Chicken Bruschetta, Tandoori Chicken, Veggie P...   \n",
       "2067                                                NaN   \n",
       "2068                                                NaN   \n",
       "\n",
       "                                    cuisines  approx_cost(for two people)  \\\n",
       "0                                  Fast Food                        200.0   \n",
       "1        South Indian, North Indian, Chinese                        200.0   \n",
       "2                                  Ice Cream                        230.0   \n",
       "3                               North Indian                          NaN   \n",
       "4     North Indian, Biryani, Andhra, Chinese                        800.0   \n",
       "...                                      ...                          ...   \n",
       "2064     North Indian, Kebab, Biryani, Rolls                        700.0   \n",
       "2065                            North Indian                          NaN   \n",
       "2066  Continental, North Indian, Finger Food                          NaN   \n",
       "2067      South Indian, Kerala, North Indian                        300.0   \n",
       "2068                                 Chinese                        150.0   \n",
       "\n",
       "                                           reviews_list  \\\n",
       "0                                                    []   \n",
       "1     [('Rated 2.0', \"RATEDn  Works only because it'...   \n",
       "2     [('Rated 4.0', \"RATEDn  Ice creams are really ...   \n",
       "3     [('Rated 3.0', \"RATEDn  It has a beautiful amb...   \n",
       "4     [('Rated 5.0', 'RATEDn  Had Good experience wi...   \n",
       "...                                                 ...   \n",
       "2064  [('Rated 1.0', \"RATEDn  Pathetic service .we v...   \n",
       "2065  [('Rated 5.0', \"RATEDn  This place is located ...   \n",
       "2066  [('Rated 4.0', 'RATEDn  Service - 4/5, Taste -...   \n",
       "2067                                                 []   \n",
       "2068  [('Rated 3.0', 'RATEDn  Small place with minim...   \n",
       "\n",
       "                                              menu_item listed_in(type)  \\\n",
       "0                                                    []        Dine-out   \n",
       "1                                                    []        Dine-out   \n",
       "2     ['Midnight Indulgence Cake', 'Butterscotch Mel...        Delivery   \n",
       "3                                                    []        Delivery   \n",
       "4                                                    []        Delivery   \n",
       "...                                                 ...             ...   \n",
       "2064                                                 []        Delivery   \n",
       "2065                                                 []        Delivery   \n",
       "2066                                                 []   Pubs and bars   \n",
       "2067                                                 []        Dine-out   \n",
       "2068                                                 []        Dine-out   \n",
       "\n",
       "            listed_in(city)                                   final_train_attr  \n",
       "0          Old Airport Road  0                                    Fast Food...  \n",
       "1     Koramangala 4th Block  0                                    Fast Food...  \n",
       "2                 Jayanagar  0                                    Fast Food...  \n",
       "3     Koramangala 7th Block  0                                    Fast Food...  \n",
       "4               Brookefield  0                                    Fast Food...  \n",
       "...                     ...                                                ...  \n",
       "2064                    BTM  0                                    Fast Food...  \n",
       "2065            Indiranagar  0                                    Fast Food...  \n",
       "2066       Old Airport Road  0                                    Fast Food...  \n",
       "2067                    BTM  0                                    Fast Food...  \n",
       "2068  Koramangala 4th Block  0                                    Fast Food...  \n",
       "\n",
       "[2069 rows x 17 columns]"
      ]
     },
     "execution_count": 221,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 276,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_recommendations(input):\n",
    "    idx = indices[input]\n",
    "    #print (idx)\n",
    "    sim_scores = list(enumerate(cosine_sim[idx]))\n",
    "    #print (sim_scores)\n",
    "    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n",
    "    count=0\n",
    "    for x,y in sim_scores:\n",
    "        if(count<4 and count>=1):\n",
    "            \n",
    "            print(str(df['name'][x])+\"  \"+str(y*100)+\"%\")\n",
    "        count=count+1    \n",
    "    job_indices = [i[0] for i in sim_scores]\n",
    "    print(\"\\n\")\n",
    "    return titles.iloc[job_indices]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 277,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Rajveena Kitchen  29.012896454965432%\n",
      "Eat Food  27.669526723018922%\n",
      "The Hub - Ibis Hotel  24.873394259771707%\n",
      "\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "1345                        The Chevron Brigade\n",
       "1249                           Rajveena Kitchen\n",
       "1188                                   Eat Food\n",
       "726                        The Hub - Ibis Hotel\n",
       "1616                       The Hub - Ibis Hotel\n",
       "                         ...                   \n",
       "2060                      New Udupi Shubh Sagar\n",
       "2063                               Firangi Bake\n",
       "2066    Murphy's Brewhouse - The Paul Bangalore\n",
       "2067                                    Cee Yem\n",
       "2068                          Cauvery Fast Food\n",
       "Name: name, Length: 2069, dtype: object"
      ]
     },
     "execution_count": 277,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "get_recommendations(df['name'][1345])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 278,
   "metadata": {},
   "outputs": [],
   "source": [
    "res=process.extract(\"must visit restaurants\", df['final_train_attr'], scorer=fuzz.token_sort_ratio)\n",
    "\n",
    "final_res=[a for a in res[0]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 279,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Desserts, Ice CreamKoramangala 1st Block150.0nan', 38, 808]"
      ]
     },
     "execution_count": 279,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 280,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shabari Kitchen  49.7839613798406%\n",
      "Bombay Kulfis  32.963119123823354%\n",
      "Bombay Kulfis  32.963119123823354%\n",
      "\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "808                                Bombay Kulfi\n",
       "715                             Shabari Kitchen\n",
       "220                               Bombay Kulfis\n",
       "358                               Bombay Kulfis\n",
       "1602                           Apsara Ice Cream\n",
       "                         ...                   \n",
       "2062                                Le Charcoal\n",
       "2063                               Firangi Bake\n",
       "2064                                    Zeeshan\n",
       "2065                          Zaica Dine & Wine\n",
       "2066    Murphy's Brewhouse - The Paul Bangalore\n",
       "Name: name, Length: 2069, dtype: object"
      ]
     },
     "execution_count": 280,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "get_recommendations(df['name'][808])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
